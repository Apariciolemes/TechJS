{
    "courses": [
        {
            "level": "Fácil",
            "contentLevel": [
                {
                    "title": "Introdução",
                    "description": "No JavaScript, instruções são chamadas de declaração e são separadas por um ponto e vírgula (;). Espaços, tabulação e uma nova linha são chamados de espaços em branco. O código fonte dos scripts em JavaScript são lidos da esquerda para a direita e são convertidos em uma sequência de elementos de entrada como simbolos, caracteres de controle, terminadores de linha, comentários ou espaço em branco. ECMAScript também define determinadas palavras-chave e literais, e tem regras para inserção automática de ponto e vírgula (ASI) para terminar as declarações. No entanto, recomenda-se sempre adicionar ponto e vírgula no final de suas declarações; isso evitará alguns imprevistos. Para obter mais informações, consulte a referência detalhada sobre a gramática léxica do JavaScript.",
                    "sequency": 0
                },
                {
                    "title": "Conteúdo",
                    "description": "Você usa variáveis como nomes simbólicos para os valores em sua aplicação. O nome das variáveis, chamados de identificadores, obedecem determinadas regras. Um identificador JavaScript deve começar com uma letra, underline (_), ou cifrão ($); os caracteres subsequentes podem também ser números (0-9). Devido JavaScript ser case-sensitive, letras incluem caracteres de 'A' a 'Z' (maiúsculos) e caracteres de 'a' a 'z' (minúsculos). Você pode usar a ISO 8859-1 ou caracteres Unicode tal como os identificadores å e ü. Você pode também usar as sequências de escape Unicode como caracteres e identificadores. Alguns exemplos de nomes legais são Numeros_visitas, temp99, e _nome.",
                    "sequency": 1
                },
                {
                    "title": "Conteúdo",
                    "description": "Quando você declara uma váriavel fora de qualquer função, ela é chamada de variável global, porque está disponível para qualquer outro código no documento atual. Quando você declara uma variável dentro de uma função, é chamada de variável local,  pois ela está disponível somente dentro dessa função. JavaScript antes do ECMAScript 6 não possuía escopo de declaração de bloco; pelo contrário, uma variável declarada dentro de um bloco de uma função é uma variável local (ou contexto global) do bloco que está inserido a função. Por exemplo o código a seguir exibirá 5, porque o escopo de x está na função (ou contexto global) no qual x é declarado, não o bloco, que neste caso é a declaração if. ",
                    "sequency": 2
                }
            ],
            "exercises": [
                {
                    "enunciation": "Quando é utilizado CONST para criar váriaveis?",
                    "options": {
                        "idIsCorrect": "1",
                        "values": [
                            {
                                "id": "1",
                                "description": "Quando você não vai alterar o valor daquela váriavel",
                                "checked": false
                            },
                            {
                                "id": "2",
                                "description": "Quando você precisa alterar o valor daquela váriavel",
                                "checked": false
                            },
                            {
                                "id": "3",
                                "description": "Quando você precisa passar como parâmetro para uma função",
                                "checked": false
                            }
                        ]
                    }
                },
                {
                    "enunciation": "Criar variveis com VAR é uma boa prática?",
                    "options": {
                        "idIsCorrect": "2",
                        "values": [
                            {
                                "id": "1",
                                "description": "Sim, é a forma mais correta de se declarar uma variavel",
                                "checked": false
                            },
                            {
                                "id": "2",
                                "description": "Nâo, atualmente temos o formato const e let para evitar os conflitos apontando pelo mesmo nome da variavel em escopos diferentes",
                                "checked": false
                            },
                            {
                                "id": "3",
                                "description": "Sim, este é o formato mais usado desde os anos 2000 e continua sendo até hoje",
                                "checked": false
                            }
                        ]
                    }
                },
                {
                    "enunciation": "Quando é utilizado LET para criar váriaveis?",
                    "options": {
                        "idIsCorrect": "2",
                        "values": [
                            {
                                "id": "1",
                                "description": "Quando você não vai alterar o valor daquela váriavel",
                                "checked": false
                            },
                            {
                                "id": "2",
                                "description": "Quando você precisa alterar o valor daquela váriavel",
                                "checked": false
                            },
                            {
                                "id": "3",
                                "description": "Quando você precisa passar como parâmetro para uma função",
                                "checked": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "level": "Médio",
            "contentLevel": [
                {
                    "title": "Arrays - Introdução",
                    "description": "Arrays são objetos semelhantes a listas que vêm com uma série de métodos embutidos para realizar operações de travessia e mutação. Nem o tamanho de um array JavaScript nem os tipos de elementos são fixos. Já que o tamanho de um array pode ser alterado a qualquer momento e os dados podem ser armazenados em posições não contíguas, arrays JavaScript não tem a garantia de serem densos; isso depende de como o programador escolhe usá-los. De uma maneira geral, essas são características convenientes, mas, se esses recursos não são desejáveis para o seu caso em particular, você pode considerar usar arrays tipados.",
                    "sequency": 0
                },
                {
                    "title": "Conteúdo",
                    "description": "Arrays não podem usar strings como índices (como em um array associativo), devem ser usados números inteiros. Definir ou acessar não-inteiros usando notação de colchetes (ou notação de ponto) não vai definir ou recuperar um elemento do array em si, mas sim definir ou acessar uma variável associada com a coleção de propriedades de objeto daquele array. As propriedades de objeto do array e a lista de elementos do array são separados, e as operações de travessia e mutação não podem ser aplicadas a essas propriedades nomeadas.",
                    "sequency": 1
                },
                {
                    "title": "Conteúdo",
                    "description": "Arrays JavaScript começam com índice zero: o primeiro elemento de um array está na posição 0 e o último elemento está na  posição equivalente ao valor da propriedade length (tamanho) menos 1. ",
                    "sequency": 2
                }
            ],
            "exercises": [
                {
                    "enunciation": "Quando utilizar o prototype map no javascript?",
                    "options": {
                        "idIsCorrect": "1",
                        "values": [
                            {
                                "id": "1",
                                "description": "Quando preciso criar um novo array a partir do array que está sendo utilizado como referência",
                                "checked": false
                            },
                            {
                                "id": "2",
                                "description": "É utilizado apenas para pecorrer o array",
                                "checked": false
                            },
                            {
                                "id": "3",
                                "description": "Só é utilizado quando preciso fazer um reduce em seguida",
                                "checked": false
                            }
                        ]
                    }
                },
                {
                    "enunciation": "O includes é utilizado para?",
                    "options": {
                        "idIsCorrect": "3",
                        "values": [
                            {
                                "id": "1",
                                "description": "Percorrer o array",
                                "checked": false
                            },
                            {
                                "id": "2",
                                "description": "Utilizado para passar como parametro para uma função",
                                "checked": false
                            },
                            {
                                "id": "3",
                                "description": "Validar se o valor inclui no array",
                                "checked": false
                            }
                        ]
                    }
                },
                {
                    "enunciation": "Quando é utilizado LET para criar váriaveis?",
                    "options": {
                        "idIsCorrect": "2",
                        "values": [
                            {
                                "id": "1",
                                "description": "Quando você não vai alterar o valor daquela váriavel",
                                "checked": false
                            },
                            {
                                "id": "2",
                                "description": "Quando você precisa alterar o valor daquela váriavel",
                                "checked": false
                            },
                            {
                                "id": "3",
                                "description": "Quando você precisa passar como parâmetro para uma função",
                                "checked": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "level": "Avançado",
            "contentLevel": [
                {
                    "title": "Introdução",
                    "description": "No JavaScript, instruções são chamadas de declaração e são separadas por um ponto e vírgula (;). Espaços, tabulação e uma nova linha são chamados de espaços em branco. O código fonte dos scripts em JavaScript são lidos da esquerda para a direita e são convertidos em uma sequência de elementos de entrada como simbolos, caracteres de controle, terminadores de linha, comentários ou espaço em branco. ECMAScript também define determinadas palavras-chave e literais, e tem regras para inserção automática de ponto e vírgula (ASI) para terminar as declarações. No entanto, recomenda-se sempre adicionar ponto e vírgula no final de suas declarações; isso evitará alguns imprevistos. Para obter mais informações, consulte a referência detalhada sobre a gramática léxica do JavaScript.",
                    "sequency": 0
                },
                {
                    "title": "Conteúdo",
                    "description": "Você usa variáveis como nomes simbólicos para os valores em sua aplicação. O nome das variáveis, chamados de identificadores, obedecem determinadas regras. Um identificador JavaScript deve começar com uma letra, underline (_), ou cifrão ($); os caracteres subsequentes podem também ser números (0-9). Devido JavaScript ser case-sensitive, letras incluem caracteres de 'A' a 'Z' (maiúsculos) e caracteres de 'a' a 'z' (minúsculos). Você pode usar a ISO 8859-1 ou caracteres Unicode tal como os identificadores å e ü. Você pode também usar as sequências de escape Unicode como caracteres e identificadores. Alguns exemplos de nomes legais são Numeros_visitas, temp99, e _nome.",
                    "sequency": 1
                },
                {
                    "title": "Conteúdo",
                    "description": "Quando você declara uma váriavel fora de qualquer função, ela é chamada de variável global, porque está disponível para qualquer outro código no documento atual. Quando você declara uma variável dentro de uma função, é chamada de variável local,  pois ela está disponível somente dentro dessa função. JavaScript antes do ECMAScript 6 não possuía escopo de declaração de bloco; pelo contrário, uma variável declarada dentro de um bloco de uma função é uma variável local (ou contexto global) do bloco que está inserido a função. Por exemplo o código a seguir exibirá 5, porque o escopo de x está na função (ou contexto global) no qual x é declarado, não o bloco, que neste caso é a declaração if. ",
                    "sequency": 2
                }
            ]
        }
    ]
}